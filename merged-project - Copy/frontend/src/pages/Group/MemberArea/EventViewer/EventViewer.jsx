import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import GroupHeader from '../../../../components/layoutPrimitives/GroupHeader';
import MemberLayout from '../../../../components/layoutPrimitives/MemberLayout';
import Event from '../../../../components/groupWidgets/EventManager/Event';
import { Dialog } from '../../../../components/common/Dialog';
import { getGroupById, confirmEventParticipation } from '../../../../services/groupService';
import { getEventsByGroupId } from '../../../../services/eventService';

/**
 * Component hi·ªÉn th·ªã th√¥ng tin s·ª± ki·ªán d√†nh cho th√†nh vi√™n nh√≥m
 * Cho ph√©p th√†nh vi√™n xem th√¥ng tin s·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o
 */
const EventViewer = () => {
  const navigate = useNavigate();
  const { groupId } = useParams();
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [loading, setLoading] = useState(true);
  
  // State ƒë·ªÉ l∆∞u th√¥ng tin nh√≥m
  const [groupInfo, setGroupInfo] = useState({
    name: '',
    memberCount: 0
  });

  // State ƒë·ªÉ l∆∞u th√¥ng tin events
  const [events, setEvents] = useState([]);
  const [currentEvent, setCurrentEvent] = useState(null);

  // L·∫•y th√¥ng tin nh√≥m v√† events khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // L·∫•y th√¥ng tin nh√≥m
        const groupResponse = await getGroupById(groupId);
        console.log('üîç Group response:', groupResponse);
        if (groupResponse.success) {
          setGroupInfo({
            name: groupResponse.data.name,
            memberCount: groupResponse.data.memberCount
          });
        } else {
          console.error('L·ªói khi l·∫•y th√¥ng tin nh√≥m:', groupResponse.message);
        }

        // L·∫•y danh s√°ch events c·ªßa nh√≥m
        const eventsResponse = await getEventsByGroupId(groupId);
        console.log('üéâ Events response:', eventsResponse);
        if (eventsResponse.success) {
          setEvents(eventsResponse.data);
          console.log('üìÖ Events data:', eventsResponse.data);
          // Hi·ªÉn th·ªã event ƒë·∫ßu ti√™n (m·ªõi nh·∫•t)
          if (eventsResponse.data.length > 0) {
            const latestEvent = eventsResponse.data[0];
            console.log('‚≠ê Latest event:', latestEvent);
            setCurrentEvent({
              name: latestEvent.name || 'Ch∆∞a c√≥ t√™n',
              location: latestEvent.venue || 'Ch∆∞a c√≥ ƒë·ªãa ƒëi·ªÉm',
              time: latestEvent.start_time ? 
                new Date(latestEvent.start_time).toLocaleString('vi-VN') : 
                'Ch∆∞a c√≥ th·ªùi gian',
              locationType: 'ƒê√£ x√°c ƒë·ªãnh',
              matchRate: '85%', // C√≥ th·ªÉ t√≠nh to√°n d·ª±a tr√™n preferences
              bookingStatus: latestEvent.status === 'confirmed' ? 'ƒê√£ ƒë·∫∑t' : 'Ch∆∞a ƒë·∫∑t',
              notificationStatus: 'ƒê√£ th√¥ng b√°o',
              attendeeCount: 0 // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau khi confirm
            });
          } else {
            console.log('‚ö†Ô∏è Kh√¥ng c√≥ events n√†o trong nh√≥m');
          }
        } else {
          console.error('L·ªói khi l·∫•y danh s√°ch s·ª± ki·ªán:', eventsResponse.message);
        }
      } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        alert('C√≥ l·ªói x·∫£y ra khi t·∫£i d·ªØ li·ªáu.');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [groupId]);
  
  // C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán
  const handleEditTime = () => {
    navigate(`/groups/${groupId}/member/time-editor`);
  };

  const handleEditLocation = () => {
    navigate(`/groups/${groupId}/member/location-preference`);
  };

  const handleConfirmParticipation = () => {
    setShowConfirmDialog(true);
  };

  const handleConfirm = async () => {
    setConfirmLoading(true);
    try {
      const response = await confirmEventParticipation(groupId);
      if (response.success) {
        // C·∫≠p nh·∫≠t attendeeCount
        if (currentEvent) {
          setCurrentEvent(prev => ({
            ...prev,
            attendeeCount: prev.attendeeCount + 1
          }));
        }
        setShowConfirmDialog(false);
        alert('ƒê√£ x√°c nh·∫≠n tham gia s·ª± ki·ªán th√†nh c√¥ng!');
      } else {
        alert('Kh√¥ng th·ªÉ x√°c nh·∫≠n tham gia: ' + response.message);
      }
    } catch (error) {
      console.error('L·ªói khi x√°c nh·∫≠n tham gia:', error);
      alert('C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n tham gia.');
    } finally {
      setConfirmLoading(false);
    }
  };
  
  // C√°c n√∫t ch·ª©c nƒÉng b√™n ph·∫£i
  const rightButtons = [
    { label: 'Ch·ªânh s·ª≠a th·ªùi gian', onClick: handleEditTime },
    { label: 'Ch·ªânh s·ª≠a v·ªã tr√≠ v√† s·ªü th√≠ch', onClick: handleEditLocation },
    { label: 'Xem s·ª± ki·ªán', onClick: () => {} }, // Kh√¥ng c·∫ßn h√†nh ƒë·ªông v√¨ ƒëang ·ªü trang xem s·ª± ki·ªán
  ];

  if (loading) {
    return (
      <div className="flex flex-col h-screen bg-gray-100">
        <GroupHeader 
          groupName="ƒêang t·∫£i..."
          memberCount={0}
          showBackToGroups={true}
          isLeader={false}
          groupId={groupId}
        />
        <div className="flex-1 flex items-center justify-center">
          <div className="text-lg text-gray-600">ƒêang t·∫£i th√¥ng tin s·ª± ki·ªán...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* Header */}
      <GroupHeader 
        groupName={groupInfo.name || 'ƒêang t·∫£i...'}
        memberCount={groupInfo.memberCount || 0}
        showBackToGroups={true}
        isLeader={false}
        groupId={groupId}
      />
      
      {/* Main Content */}
      <MemberLayout rightButtons={rightButtons}>
        {events.length === 0 ? (
          <div className="bg-white rounded-md shadow-sm p-8 text-center">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Ch∆∞a c√≥ s·ª± ki·ªán</h2>
            <p className="text-gray-600">
              Nh√≥m n√†y ch∆∞a c√≥ s·ª± ki·ªán n√†o ƒë∆∞·ª£c t·∫°o. 
              Vui l√≤ng li√™n h·ªá v·ªõi tr∆∞·ªüng nh√≥m ƒë·ªÉ t·∫°o s·ª± ki·ªán m·ªõi.
            </p>
          </div>
        ) : (
          <Event
            variant="member"
            eventDetails={currentEvent}
            onConfirmParticipation={handleConfirmParticipation}
          />
        )}
        
        <Dialog
          isOpen={showConfirmDialog}
          onClose={() => !confirmLoading && setShowConfirmDialog(false)}
          onConfirm={handleConfirm}
          title="X√°c nh·∫≠n tham gia"
          message="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tham gia s·ª± ki·ªán n√†y?"
          confirmText={confirmLoading ? "ƒêang x√°c nh·∫≠n..." : "X√°c nh·∫≠n"}
          type="confirm"
        />
      </MemberLayout>
    </div>
  );
};

export default EventViewer;
